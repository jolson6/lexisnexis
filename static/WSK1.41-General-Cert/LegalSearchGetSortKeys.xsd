<?xml version="1.0" encoding="UTF-8"?>
<schema xmlns="http://www.w3.org/2001/XMLSchema"
	targetNamespace="http://legalsearchgetsortkeys.resultsorting.services.v1.wsapi.lexisnexis.com"
	xmlns:tns="http://legalsearchgetsortkeys.resultsorting.services.v1.wsapi.lexisnexis.com"
	xmlns:result="http://result.common.services.v1.wsapi.lexisnexis.com"
	xmlns:security="http://security.common.services.v1.wsapi.lexisnexis.com"
	xmlns:common="http://common.services.v1.wsapi.lexisnexis.com"
	elementFormDefault="qualified" attributeFormDefault="unqualified"
	version="1.0">

	<import
		namespace="http://result.common.services.v1.wsapi.lexisnexis.com"
		schemaLocation="Result.xsd" />
	<import
		namespace="http://security.common.services.v1.wsapi.lexisnexis.com"
		schemaLocation="Security.xsd" />
	<import 
	    namespace="http://common.services.v1.wsapi.lexisnexis.com"
		schemaLocation="Common.xsd" />

	<!-- Define request/response elements -->
	<element name="LegalSearchGetSortKeys" type="tns:LegalSearchGetSortKeys">
		<annotation>
			<documentation>
				Analyzes the documents in the current results set to
				determine the legal sort keys by which they can be
				meaningfully sorted.
			</documentation>
		</annotation>
	</element>
	<element name="LegalSearchGetSortKeysResponse"
		type="tns:LegalSearchGetSortKeysResponse">
		<annotation>
			<documentation>
				The response that includes all legal sort keys
				applicable to the current results set.
			</documentation>
		</annotation>
	</element>

	<!-- Define request/response types -->
	<complexType name="LegalSearchGetSortKeys">
		<complexContent>
			<extension base="common:BaseRequest">
				<sequence>
					<element name="binarySecurityToken"
						type="security:BinarySecurityToken">
						<annotation>
							<documentation>
								<example>
									f4348ad8876542bc93748c89fb98a7e
								</example>
								Security token that must be provided on
								all non-authentication requests.
							</documentation>
						</annotation>
					</element>
					<element name="searchId" type="string">
						<annotation>
							<documentation>
								<example>ef5bafbd11</example>
								Unique identifier that maintains all
								pertinent information from the original
								search.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>

	<complexType name="LegalSearchGetSortKeysResponse">
		<sequence>
			<element name="legalSortKeyList"
				type="tns:LegalSortKeyList">
				<annotation>
					<documentation>
						A list of sort key values by which the results
						could be sorted.
					</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>

	<complexType name="LegalSortKeyList">
		<sequence>
			<element name="legalSortKey" type="tns:LegalSortKey"
				minOccurs="0" maxOccurs="unbounded">
				<annotation>
					<documentation>
						A single key by which the results can be sorted.
					</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>

	<complexType name="LegalSortKey">
		<sequence>
			<element name="name" type="string">
				<annotation>
					<documentation>
						A readable name that describes this sort key.
					</documentation>
				</annotation>
			</element>
			<element name="sortId" type="string">
				<annotation>
					<documentation>
						Unique identifier that contains the necessary
						information to sort results using this key. One
						or more sortId values can be used as input for
						SortResults.
					</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>

</schema>